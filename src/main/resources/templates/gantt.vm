###requireResource("com.sensorsdata.jiraplugin.gantt:gantt-resources")
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>$name - Jira Gantt</title>
    <meta name="decorator" content="atl.general"/>


</head>
<body>
<div class="gantt_control">
    <button id="zoom_toggle" class='zoom_toggle' >Zoom to Fit</button>
    <input id="zoom_in" type=button value="Zoom In" >
    <input id="zoom_out" type=button value="Zoom Out" >
</div>
<div id="gantt_here" style='width:100%; height:100vh;'></div>



    #if ($ganttIssueList.size() > 0)
    <div style="display: none" id="issue-data">$ganttIssueListJson</div>
    #end
<script>
    AJS.$(document).ready(function () {

        jQuery("#zoom_toggle").click(function (){
            toggleMode(jQuery(this));
        });
        jQuery("#zoom_in").click(function (){
            zoom_in();
        });
        jQuery("#zoom_out").click(function (){
            zoom_out();
        });
        function toggleMode(toggle) {
            gantt.$zoomToFit = !gantt.$zoomToFit;
            if (gantt.$zoomToFit) {
                toggle.innerHTML = "Set default Scale";
                //Saving previous scale state for future restore
                saveConfig();
                zoomToFit();
            } else {

                toggle.innerHTML = "Zoom to Fit";
                //Restore previous scale state
                restoreConfig();
                gantt.render();
            }
        }

        var cachedSettings = {};

        function saveConfig() {
            var config = gantt.config;
            cachedSettings = {};
            cachedSettings.scales = config.scales;
            cachedSettings.start_date = config.start_date;
            cachedSettings.end_date = config.end_date;
            cachedSettings.scroll_position = gantt.getScrollState();
        }

        function restoreConfig() {
            applyConfig(cachedSettings);
        }

        function applyConfig(config, dates) {

            gantt.config.scales = config.scales;

            // restore the previous scroll position
            if (config.scroll_position) {
                setTimeout(function(){
                    gantt.scrollTo(config.scroll_position.x, config.scroll_position.y)
                },4)
            }
        }


        function zoomToFit() {
            var project = gantt.getSubtaskDates(),
                areaWidth = gantt.$task.offsetWidth,
                scaleConfigs = zoomConfig.levels;

            for (var i = 0; i < scaleConfigs.length; i++) {
                var columnCount = getUnitsBetween(project.start_date, project.end_date, scaleConfigs[i].scales[scaleConfigs[i].scales.length-1].unit, scaleConfigs[i].scales[0].step);
                if ((columnCount + 2) * gantt.config.min_column_width <= areaWidth) {
                    break;
                }
            }


            if (i == scaleConfigs.length) {
                i--;
            }

            gantt.ext.zoom.setLevel(scaleConfigs[i].name);
            applyConfig(scaleConfigs[i], project);
        }

        // get number of columns in timeline
        function getUnitsBetween(from, to, unit, step) {
            var start = new Date(from),
                end = new Date(to);
            var units = 0;
            while (start.valueOf() < end.valueOf()) {
                units++;
                start = gantt.date.add(start, step, unit);
            }
            return units;
        }

        function zoom_in(){
            gantt.ext.zoom.zoomIn();
            gantt.$zoomToFit = false;
            document.querySelector(".zoom_toggle").innerHTML = "Zoom to Fit";
        }
        function zoom_out(){
            gantt.ext.zoom.zoomOut();
            gantt.$zoomToFit = false;
            document.querySelector(".zoom_toggle").innerHTML = "Zoom to Fit";
        }


        var zoomConfig = {
            levels: [
                // hours
                {
                    name:"hour",
                    scale_height: 27,
                    scales:[
                        {unit:"day", step: 1, format:"%d %M"},
                        {unit:"hour", step: 1, format:"%H:%i"},
                    ]
                },
                // days
                {
                    name:"day",
                    scale_height: 27,
                    scales:[
                        {unit: "day", step: 1, format: "%d %M"}
                    ]
                },
                // weeks
                {
                    name:"week",
                    scale_height: 50,
                    scales:[
                        {unit: "week", step: 1, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%d %M");
                                var endDate = gantt.date.add(date, -6, "day");
                                var weekNum = gantt.date.date_to_str("%W")(date);
                                return "#" + weekNum + ", " + dateToStr(date) + " - " + dateToStr(endDate);
                            }},
                        {unit: "day", step: 1, format: "%j %D"}
                    ]
                },
                // months
                {
                    name:"month",
                    scale_height: 50,
                    scales:[
                        {unit: "month", step: 1, format: "%F, %Y"},
                        {unit: "week", step: 1, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%d %M");
                                var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }}
                    ]
                },
                // quarters
                {
                    name:"quarter",
                    height: 50,
                    scales:[
                        {
                            unit: "quarter", step: 3, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%M %y");
                                var endDate = gantt.date.add(gantt.date.add(date, 3, "month"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }
                        },
                        {unit: "month", step: 1, format: "%M"},
                    ]
                },
                // years
                {
                    name:"year",
                    scale_height: 50,
                    scales:[
                        {unit: "year", step: 5, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%Y");
                                var endDate = gantt.date.add(gantt.date.add(date, 5, "year"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }}
                    ]
                },
                // decades
                {
                    name:"year",
                    scale_height: 50,
                    scales:[
                        {unit: "year", step: 100, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%Y");
                                var endDate = gantt.date.add(gantt.date.add(date, 100, "year"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }},
                        {unit: "year", step: 10, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%Y");
                                var endDate = gantt.date.add(gantt.date.add(date, 10, "year"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }},
                    ]
                },
            ],
            element: function(){
                return gantt.$root.querySelector(".gantt_task");
            }
        };

        gantt.config.fit_tasks = true;


        gantt.ext.zoom.init(zoomConfig);

        gantt.ext.zoom.setLevel("week");

        gantt.$zoomToFit = false;


        // default columns definition
        gantt.config.columns=[
            {name:"text",       label:"Task name",  tree:true, width:'*' },
            {name:"assignee", label:"Assignee", align: "center" },
            {name:"start_date", label:"Start time", align: "center" },
            {name:"duration",   label:"Duration",   align: "center" },
        ];

        var ganttIssueList = JSON.parse(jQuery("#issue-data").html());
        console.log(ganttIssueList);
        gantt.config.date_format = "%Y-%m-%d %H:%i:%s";

        gantt.config.lightbox.sections = [
            {name: "description", height: 70, map_to: "text", type: "textarea", focus: true},
            {name: "time", type: "duration", map_to: "auto"}
        ];

        gantt.config.work_time = true;  // removes non-working time from calculations
        gantt.config.skip_off_time = true;    // hides non-working time in the chart

        gantt.config.layout = {
            css: "gantt_container",
            rows:[
                {
                    cols: [
                        {
                            // the default grid view
                            view: "grid",
                            scrollX:"scrollHor",
                            scrollY:"scrollVer"
                        },
                        { resizer: true, width: 1 },
                        {
                            // the default timeline view
                            view: "timeline",
                            scrollX:"scrollHor",
                            scrollY:"scrollVer"
                        },
                        {
                            view: "scrollbar",
                            id:"scrollVer"
                        }
                    ]},
                {
                    view: "scrollbar",
                    id:"scrollHor"
                }
            ]
        }
        var data = [];
        for (var i = 0; i < ganttIssueList.length; i++) {
            data.push({
                id: ganttIssueList[i].key,
                text: ganttIssueList[i].summary,
                start_date: ganttIssueList[i].startDate.value,
                end_date: ganttIssueList[i].endDate.value,
                parent: ganttIssueList[i].dependency == 'root'? 0 :ganttIssueList[i].dependency,
                assignee:ganttIssueList[i].assignee ?ganttIssueList[i].assignee : '未分配',
                open:  ganttIssueList[i].dependency == 'root'? true : false

        });
        }

        console.log(data);

        gantt.init("gantt_here");
        // gantt.parse({
        //     data: [
        //         {id: "TESt-1", text: "Project #1", start_date: null, duration: null, parent:0, progress: 0, open: true},
        //         {id:  "TESt-2", text: "Task #1", start_date: "2023-03-01 00:00", duration:5, parent: "TESt-1", progress: 1},
        //         {id:  "TESt-3", text: "Task #2", start_date: "2023-03-06 00:00", duration:2, parent: "TESt-1", progress: 0.5},
        //         {id:  "TESt-4", text: "Task #3", start_date: null, duration: null, parent: "TESt-1", progress: 0.8, open: true},
        //         {id:  "TESt-5", text: "Task #3.1", start_date: "2023-03-09 00:00", duration:2, parent: "TESt-4", progress: 0.2},
        //         {id:  "TESt-6", text: "Task #3.2", start_date: "2023-03-11 00:00", duration:1, parent: "TESt-4", progress: 0}
        //     ]
        // });
        gantt.parse({
            data: data,
            links: []
        });


        gantt.attachEvent("onAfterTaskDrag", function (id, mode) {
            var task = gantt.getTask(id);
            if (mode == gantt.config.drag_mode.progress) {
                var pr = Math.floor(task.progress * 100 * 10) / 10;
               console.log(task.text + " is now " + pr + "% completed!");
            } else {
                var convert = gantt.date.date_to_str("%H:%i, %F %j");
                var s = task.start_date.valueOf();
                var e = task.end_date.valueOf();
                console.log(task.text + " starts at " + s + " and ends at " + e);
                console.log(task);
                jQuery.ajax({
                    "url": "/jira/plugins/servlet/gantt",
                    "method": "POST",
                    "data": {
                        "key": task.id,
                        "config": new URL(location.href).searchParams.get('id'),
                        "startDate": s,
                        "endDate": e
                    },
                    success: function (data) {
                        console.log(data);
                    },
                    error: function (data) {
                        console.log('error',data);
                    }
                });
            }

        });
    });

</script>
</body>
</html>
