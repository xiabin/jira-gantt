###requireResource("com.sensorsdata.jiraplugin.gantt:gantt-resources")
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>$name - Jira Gantt</title>
    <meta name="decorator" content="atl.general"/>
    <style>
        .gantt_task_cell.week_end {
            background-color: #EFF5FD;
        }

        .gantt_task_row.gantt_selected .gantt_task_cell.week_end {
            background-color: #F8EC9C;
        }
    </style>

</head>
<body>
<div class="gantt_control">
    <button id="zoom_toggle" class='zoom_toggle'>Zoom to Fit</button>
    <input id="zoom_in" type=button value="Zoom In">
    <input id="zoom_out" type=button value="Zoom Out">
</div>
<div id="gantt_here" style='width:100%; height:100vh;'></div>



    #if ($ganttIssueList.size() > 0)
    <div style="display: none" id="issue-data">$ganttIssueListJson</div>
    #end
<script>
    AJS.$(document).ready(function () {

        jQuery("#zoom_toggle").click(function () {
            toggleMode(jQuery(this));
        });
        jQuery("#zoom_in").click(function () {
            zoom_in();
        });
        jQuery("#zoom_out").click(function () {
            zoom_out();
        });

        function toggleMode(toggle) {
            gantt.$zoomToFit = !gantt.$zoomToFit;
            if (gantt.$zoomToFit) {
                toggle.innerHTML = "Set default Scale";
                //Saving previous scale state for future restore
                saveConfig();
                zoomToFit();
            } else {

                toggle.innerHTML = "Zoom to Fit";
                //Restore previous scale state
                restoreConfig();
                gantt.render();
            }
        }

        var cachedSettings = {};

        function saveConfig() {
            var config = gantt.config;
            cachedSettings = {};
            cachedSettings.scales = config.scales;
            cachedSettings.start_date = config.start_date;
            cachedSettings.end_date = config.end_date;
            cachedSettings.scroll_position = gantt.getScrollState();
        }

        function restoreConfig() {
            applyConfig(cachedSettings);
        }

        function applyConfig(config, dates) {

            gantt.config.scales = config.scales;

            // restore the previous scroll position
            if (config.scroll_position) {
                setTimeout(function () {
                    gantt.scrollTo(config.scroll_position.x, config.scroll_position.y)
                }, 4)
            }
        }


        function zoomToFit() {
            var project = gantt.getSubtaskDates(),
                areaWidth = gantt.$task.offsetWidth,
                scaleConfigs = zoomConfig.levels;

            for (var i = 0; i < scaleConfigs.length; i++) {
                var columnCount = getUnitsBetween(project.start_date, project.end_date, scaleConfigs[i].scales[scaleConfigs[i].scales.length - 1].unit, scaleConfigs[i].scales[0].step);
                if ((columnCount + 2) * gantt.config.min_column_width <= areaWidth) {
                    break;
                }
            }


            if (i == scaleConfigs.length) {
                i--;
            }

            gantt.ext.zoom.setLevel(scaleConfigs[i].name);
            applyConfig(scaleConfigs[i], project);
        }

        // get number of columns in timeline
        function getUnitsBetween(from, to, unit, step) {
            var start = new Date(from),
                end = new Date(to);
            var units = 0;
            while (start.valueOf() < end.valueOf()) {
                units++;
                start = gantt.date.add(start, step, unit);
            }
            return units;
        }

        function zoom_in() {
            gantt.ext.zoom.zoomIn();
            gantt.$zoomToFit = false;
            document.querySelector(".zoom_toggle").innerHTML = "Zoom to Fit";
        }

        function zoom_out() {
            gantt.ext.zoom.zoomOut();
            gantt.$zoomToFit = false;
            document.querySelector(".zoom_toggle").innerHTML = "Zoom to Fit";
        }


        var zoomConfig = {
            levels: [
                // hours
                {
                    name: "hour",
                    scale_height: 27,
                    scales: [
                        {unit: "day", step: 1, format: "%d %M"},
                        {unit: "hour", step: 1, format: "%H:%i"},
                    ]
                },
                // days
                {
                    name: "day",
                    scale_height: 27,
                    scales: [
                        {unit: "day", step: 1, format: "%d %M"}
                    ]
                },
                // weeks
                {
                    name: "week",
                    scale_height: 50,
                    scales: [
                        {
                            unit: "week", step: 1, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%d %M");
                                var endDate = gantt.date.add(date, -6, "day");
                                var weekNum = gantt.date.date_to_str("%W")(date);
                                return "#" + weekNum + ", " + dateToStr(date) + " - " + dateToStr(endDate);
                            }
                        },
                        {unit: "day", step: 1, format: "%j %D"}
                    ]
                },
                // months
                {
                    name: "month",
                    scale_height: 50,
                    scales: [
                        {unit: "month", step: 1, format: "%F, %Y"},
                        {
                            unit: "week", step: 1, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%d %M");
                                var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }
                        }
                    ]
                },
                // quarters
                {
                    name: "quarter",
                    height: 50,
                    scales: [
                        {
                            unit: "quarter", step: 3, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%M %y");
                                var endDate = gantt.date.add(gantt.date.add(date, 3, "month"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }
                        },
                        {unit: "month", step: 1, format: "%M"},
                    ]
                },
                // years
                {
                    name: "year",
                    scale_height: 50,
                    scales: [
                        {
                            unit: "year", step: 5, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%Y");
                                var endDate = gantt.date.add(gantt.date.add(date, 5, "year"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }
                        }
                    ]
                },
                // decades
                {
                    name: "year",
                    scale_height: 50,
                    scales: [
                        {
                            unit: "year", step: 100, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%Y");
                                var endDate = gantt.date.add(gantt.date.add(date, 100, "year"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }
                        },
                        {
                            unit: "year", step: 10, format: function (date) {
                                var dateToStr = gantt.date.date_to_str("%Y");
                                var endDate = gantt.date.add(gantt.date.add(date, 10, "year"), -1, "day");
                                return dateToStr(date) + " - " + dateToStr(endDate);
                            }
                        },
                    ]
                },
            ],
            element: function () {
                return gantt.$root.querySelector(".gantt_task");
            }
        };

        gantt.config.fit_tasks = true;


        gantt.ext.zoom.init(zoomConfig);

        gantt.ext.zoom.setLevel("week");

        gantt.$zoomToFit = false;

        gantt.config.grid_width = 600;

        // default columns definition
        gantt.config.columns = [
            {
                name: "text",
                label: "Task name",
                tree: true,
                width: "*",
                min_width: 150,
                max_width: 500,
                template: function (obj) {
                    return '<a target="_blank" href="' + obj.issueBrowseUrl + '">' + obj.text + '</a>'
                }
            },
            {name: "assignee", label: "Assignee", align: "center", width: "*", max_width: 80},
            {name: "start_date", label: "Start time", align: "center", width: "*", max_width: 80},
            {name: "duration", label: "Duration", align: "center", width: "*", max_width: 50},
        ];

        var ganttIssueList = JSON.parse(jQuery("#issue-data").html());
        gantt.config.date_format = "%Y-%m-%d %H:%i:%s";

        gantt.config.lightbox.sections = [
            {name: "description", height: 70, map_to: "text", type: "textarea", focus: true},
            {name: "time", type: "duration", map_to: "auto"}
        ];

        //支持工作日开始

        gantt.config.work_time = true;
        gantt.config.min_column_width = 60;
        gantt.config.duration_unit = "day";
        gantt.config.scale_height = 20 * 3;
        gantt.config.row_height = 30;

        var weekScaleTemplate = function (date) {
            var dateToStr = gantt.date.date_to_str("%d %M");
            var weekNum = gantt.date.date_to_str("(week %W)");
            var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
            return dateToStr(date) + " - " + dateToStr(endDate) + " " + weekNum(date);
        };

        gantt.config.scales = [
            {unit: "month", step: 1, format: "%F, %Y"},
            {unit: "week", step: 1, format: weekScaleTemplate},
            {unit: "day", step: 1, format: "%D, %d"}
        ];

        gantt.templates.timeline_cell_class = function (task, date) {
            if (!gantt.isWorkTime(date))
                return "week_end";
            return "";
        };

        //支持工作日结束


        gantt.config.buttons_left = ["gantt_save_btn"];
        gantt.config.buttons_right = ["gantt_cancel_btn"];


        var data = [];
        for (var i = 0; i < ganttIssueList.length; i++) {
            data.push({
                id: ganttIssueList[i].key,
                text: ganttIssueList[i].summary,
                start_date: ganttIssueList[i].isParent ? null : ganttIssueList[i].startDate.value,
                end_date: ganttIssueList[i].isParent ? null : ganttIssueList[i].endDate.value,
                parent: ganttIssueList[i].dependency == 'root' ? 0 : ganttIssueList[i].dependency,
                assignee: ganttIssueList[i].assignee ? ganttIssueList[i].assignee : '未分配',
                issueBrowseUrl: ganttIssueList[i].issueBrowseUrl,
                open: ganttIssueList[i].dependency == 'root' ? true : false

            });
        }


        gantt.init("gantt_here");
        gantt.parse({
            data: data,
            links: []
        });


        gantt.attachEvent("onAfterTaskDrag", function (id, mode) {
            var task = gantt.getTask(id);
            if (mode == gantt.config.drag_mode.progress) {
                var pr = Math.floor(task.progress * 100 * 10) / 10;
            } else {
                var s = task.start_date.valueOf();
                var e = task.end_date.valueOf();
                var data = {
                    "key": task.id,
                    "config": new URL(location.href).searchParams.get('id'),
                    "startDate": s,
                    "endDate": e
                };

                updateGanttIssue(data);

                gantt.eachParent(function(task){
                    var s = task.start_date.valueOf();
                    var e = task.end_date.valueOf();
                    var data = {
                        "key": task.id,
                        "config": new URL(location.href).searchParams.get('id'),
                        "startDate": s,
                        "endDate": e
                    };
                    updateGanttIssue(data);
                }, id);
            }
        });

        gantt.attachEvent("onLightboxSave", function (id, task, is_new) {
            if (is_new == false) {
                var s = task.start_date.valueOf();
                var e = task.end_date.valueOf();
                var data = {
                    "key": task.id,
                    "config": new URL(location.href).searchParams.get('id'),
                    "summary": task.text,
                    "startDate": s,
                    "endDate": e
                };
                updateGanttIssue(data);

                gantt.eachParent(function(task){
                    var s = task.start_date.valueOf();
                    var e = task.end_date.valueOf();
                    var data = {
                        "key": task.id,
                        "config": new URL(location.href).searchParams.get('id'),
                        "startDate": s,
                        "endDate": e
                    };
                    updateGanttIssue(data);
                }, id);
            }

            return true;
        })
    });

    function updateGanttIssue(data) {
        jQuery.ajax({
            "url": "gantt",
            "method": "POST",
            "data": data,
            success: function (data) {
            },
            error: function (data) {
                console.log('error', data);
            }
        });
    }

</script>
</body>
</html>
